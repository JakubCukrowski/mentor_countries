{"mappings":"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","sources":["src/main.js"],"sourcesContent":["//section id=top\r\nconst topSection = document.querySelector('#top');\r\n\r\n//dropdown menu\r\n\r\nconst selectContinent = document.querySelector('.dropdown-menu');\r\nconst dropdownList = document.querySelector('.dropdown-list');\r\nconst selectOptions = dropdownList.querySelectorAll('li');\r\n\r\n//countries container\r\n\r\nconst countriesContainer = document.querySelector('.countries-container');\r\n\r\n//searchbar\r\nconst searchbar = document.querySelector('.search-bar');\r\n\r\n//utilities container to delete\r\nconst utilitiesContainer = document.querySelector('.utilities__container')\r\n\r\n// countries variable, storing fetched data\r\n\r\nlet countries;\r\n\r\n//url api changers for filtering\r\nlet region;\r\nlet endpoint;\r\nlet countryName;\r\n\r\nlet url = 'https://restcountries.com/v3.1/all';\r\nconst currentURL = window.location.pathname.split('/');\r\n\r\n//reference https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\r\nconst currentCountryName = decodeURIComponent(currentURL[currentURL.length - 1])\r\n\r\nlet currentCountry;\r\n\r\nlet countriesByRegion;\r\n\r\n//handle response, store it in 'countries' variable\r\n\r\nconst fetchCountries = async () => {\r\n    await fetch(url)\r\n    .then(response => response.json())\r\n    .then(response => {\r\n        countries = response.map(country => {\r\n            return {\r\n                commonName: country.name.common,\r\n                nativeName: country.name.nativeName,\r\n                languages: country.languages,\r\n                images: country.flags,\r\n                isoCode: country.flag,\r\n                population: country.population,\r\n                region: country.region,\r\n                subregion: country.subregion,\r\n                capital: country.capital,\r\n                topLevelDomain: country.tld,\r\n                currencies: country.currencies,\r\n                borders: country.borders || null,\r\n                cca3: country.cca3\r\n            }\r\n        });\r\n        \r\n        if (window.location.pathname === '/') {\r\n            countries.forEach(country => {\r\n                addCountryStructure(\r\n                    country.images.png,\r\n                    country.isoCode,\r\n                    country.commonName,\r\n                    country.population,\r\n                    country.region,\r\n                    country.capital\r\n                )\r\n            })\r\n        } else {\r\n            currentCountry = countries.find(country => country.commonName === currentCountryName)\r\n            utilitiesContainer.classList.add('no-display');\r\n            singleCountryStructure(\r\n                currentCountry.images.png, \r\n                currentCountry.isoCode,\r\n                currentCountry.commonName,\r\n                Object.values(currentCountry.nativeName).length > 2 \r\n                    ? Object.values(currentCountry.nativeName)[2].common\r\n                    : Object.values(currentCountry.nativeName)[0].common,\r\n                currentCountry.population,\r\n                currentCountry.region,\r\n                currentCountry.subregion,\r\n                currentCountry.capital, \r\n                currentCountry.topLevelDomain,\r\n                Object.values(currentCountry.currencies)[0].name,\r\n                Object.values(currentCountry.languages).join(', '),\r\n                currentCountry.borders\r\n            )\r\n        }\r\n    })\r\n    .catch(err => console.log(err));\r\n}\r\n\r\n//country div\r\nconst addCountryStructure = (src, alt, name, population, region, capital) => {\r\n    const newLink = document.createElement('a');\r\n    newLink.href = `/country/${name}`\r\n    newLink.setAttribute('id', `${name}`);\r\n    newLink.addEventListener('click', countryDetail)\r\n    const newDiv = document.createElement('div');\r\n    newLink.append(newDiv);\r\n    newDiv.classList.add('country-wrapper');\r\n    countriesContainer.append(newLink);\r\n    newDiv.innerHTML = `\r\n        <img src=${src} alt=${alt}>\r\n        <div class=\"content\">\r\n            <h2>${name}</h2>\r\n            <p class=\"population\">\r\n                <span class=\"content-text-bold\">Population:</span> ${population.toLocaleString('en-us', {style: 'decimal'})}\r\n            </p>\r\n            <p class=\"region\"><span class=\"content-text-bold\">Region:</span> ${region}</p>\r\n            <p class=\"capital\"><span class=\"content-text-bold\">Capital:</span> ${capital}</p>\r\n        </div>\r\n\r\n    `\r\n}\r\n\r\n//handle dropdown menu\r\n\r\nconst handleSelectContinent = () => {\r\n    dropdownList.classList.toggle('blocked');\r\n}\r\n\r\nselectContinent.addEventListener('click', handleSelectContinent)\r\n\r\nconst handleOptions = (event) => {\r\n    selectContinent.innerText = event.target.innerText;\r\n    region = event.target.getAttribute('value');\r\n    dropdownList.classList.remove('blocked');\r\n    countriesContainer.innerHTML = '';\r\n    countriesByRegion = countries.filter(country => country.region === region)\r\n    countriesByRegion.forEach(country => {\r\n        addCountryStructure(\r\n            country.images.png,\r\n            country.isoCode,\r\n            country.commonName,\r\n            country.population,\r\n            country.region,\r\n            country.capital\r\n        )\r\n    })\r\n}\r\n\r\nselectOptions.forEach(option => option.addEventListener('click', handleOptions))\r\n\r\n//handle searchbar\r\n\r\nconst handleSearchbar = (e) => {\r\n    endpoint = e.target.value;\r\n\r\n    if (endpoint.length > 0) {\r\n        if (region !== undefined) {\r\n            const countryFilteredByRegion = countriesByRegion\r\n                .filter(country => country.commonName\r\n                    .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase().includes(endpoint.toLowerCase()))\r\n            countriesContainer.innerHTML = '';\r\n            countryFilteredByRegion.forEach(country => {\r\n                addCountryStructure(\r\n                    country.images.png,\r\n                    country.isoCode,\r\n                    country.commonName,\r\n                    country.population,\r\n                    country.region,\r\n                    country.capital\r\n                )\r\n            })\r\n\r\n        } else {\r\n            const filteredCountry = countries\r\n                .filter(country => country.commonName\r\n                    .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase().includes(endpoint.toLowerCase()))\r\n            countriesContainer.innerHTML = '';\r\n            filteredCountry.forEach(country => {\r\n                addCountryStructure(\r\n                    country.images.png,\r\n                    country.isoCode,\r\n                    country.commonName,\r\n                    country.population,\r\n                    country.region,\r\n                    country.capital\r\n                )\r\n            });\r\n        }\r\n    }\r\n    \r\n    if (e.target.value.length <= 0 && region !== undefined) {\r\n        countriesContainer.innerHTML = '';\r\n        countriesByRegion.forEach(country => {\r\n            addCountryStructure(\r\n                country.images.png,\r\n                country.isoCode,\r\n                country.commonName,\r\n                country.population,\r\n                country.region,\r\n                country.capital\r\n            )\r\n        })\r\n\r\n    } else if (e.target.value.length <= 0 && region === undefined) {\r\n        countriesContainer.innerHTML = '';\r\n        countries.forEach(country => {\r\n            addCountryStructure(\r\n                country.images.png,\r\n                country.isoCode,\r\n                country.commonName,\r\n                country.population,\r\n                country.region,\r\n                country.capital\r\n            )\r\n        })\r\n    }\r\n}\r\n\r\nsearchbar.addEventListener('input', handleSearchbar)\r\n\r\n//single country structure \r\n\r\nconst singleCountryStructure = (\r\n    src,\r\n    alt,\r\n    singleCountryName,\r\n    nativeName,\r\n    population,\r\n    countryRegion,\r\n    subregion,\r\n    capital,\r\n    topLevelDomain,\r\n    currencies,\r\n    languages,\r\n    borderCountries\r\n    ) => {\r\n    const newDiv = document.createElement('div');\r\n    newDiv.classList.add('single-country-wrapper')\r\n    const newButton = document.createElement('button');\r\n    newButton.classList.add('back-btn');\r\n    newButton.innerText = 'Back';\r\n    newButton.addEventListener('click', () => {\r\n        countriesContainer.innerHTML = '';\r\n        utilitiesContainer.classList.remove('no-display');\r\n        searchbar.value = '';\r\n        history.back();\r\n\r\n        if (region !== undefined) {\r\n            countriesByRegion.forEach(country => {\r\n                addCountryStructure(\r\n                    country.images.png,\r\n                    country.isoCode,\r\n                    country.commonName,\r\n                    country.population,\r\n                    country.region,\r\n                    country.capital\r\n                )\r\n            })\r\n        } else {\r\n            countries.forEach(country => {\r\n                addCountryStructure(\r\n                    country.images.png,\r\n                    country.isoCode,\r\n                    country.commonName,\r\n                    country.population,\r\n                    country.region,\r\n                    country.capital\r\n                )\r\n            })\r\n        }\r\n    })\r\n    countriesContainer.append(newDiv);\r\n    newDiv.innerHTML = `\r\n        <div class='country-data-wrapper'>\r\n            <img src=${src} alt=${alt} >\r\n            <div class='country-info-wrapper'>\r\n                <h2>${singleCountryName}</h2>\r\n                <div class='content-wrapper'>\r\n                    <div class='left-side-content'>\r\n                        <p><strong>Native name: </strong>${nativeName}</p>\r\n                        <p>\r\n                            <strong>Population: </strong>\r\n                            ${population.toLocaleString('en-US')}\r\n                        </p>\r\n                        <p>\r\n                            <strong>Region: </strong>\r\n                            ${countryRegion}\r\n                        </p>\r\n                        <p>\r\n                            <strong>Sub Region: </strong>\r\n                            ${subregion}\r\n                        </p>\r\n                        <p>\r\n                            <strong>Capital: </strong>\r\n                            ${capital}\r\n                        </p>\r\n                    </div>\r\n                    <div class='right-side-content'>\r\n                        <p>\r\n                            <strong>Top Level Domain: </strong>\r\n                            ${topLevelDomain}\r\n                        </p>\r\n                        <p>\r\n                            <strong>Currencies: </strong>\r\n                            ${currencies}\r\n                        </p>\r\n                        <p>\r\n                            <strong>Languages: </strong>\r\n                            ${languages}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `\r\n    newDiv.prepend(newButton);\r\n    const countryInfoWrapper = newDiv.querySelector('.country-info-wrapper');\r\n\r\n    //check if country has aany neighbours, if yes, add buttons\r\n    if (borderCountries) {\r\n        const borderButtonsContainer = document.createElement('div');\r\n        borderButtonsContainer.classList.add('border-buttons-container')\r\n        const borderButtonsWrapper = document.createElement('div')\r\n        borderButtonsWrapper.classList.add('border-buttons-wrapper')\r\n        borderButtonsContainer.innerHTML = `<p><strong>Border Counties: </strong></p>`\r\n        for (let i = 0; i < borderCountries.length; i++) {\r\n            const borderCountryButton = document.createElement('button');\r\n            borderCountryButton.classList.add('border-country-btn');\r\n            const filterBorderCountries = countries.find(country => country.cca3 === borderCountries[i])\r\n            borderCountryButton.id = borderCountries[i]\r\n\r\n            borderCountryButton.innerText = filterBorderCountries.commonName;\r\n            borderButtonsWrapper.append(borderCountryButton)\r\n        }\r\n        borderButtonsContainer.append(borderButtonsWrapper)\r\n        countryInfoWrapper.append(borderButtonsContainer);\r\n    }\r\n}\r\n\r\n// country details page\r\n\r\nconst countryDetail = async (e) => {\r\n    e.preventDefault();\r\n    countriesContainer.innerHTML = '';\r\n    utilitiesContainer.classList.add('no-display');\r\n    countryName = e.target.closest('a').id;\r\n    currentCountry = countries.find(country => country.commonName === countryName);\r\n    history.pushState(null, null, `/country/${countryName}`)\r\n    singleCountryStructure(\r\n        currentCountry.images.png, \r\n        currentCountry.isoCode,\r\n        currentCountry.commonName,\r\n        Object.values(currentCountry.nativeName).length > 2 \r\n            ? Object.values(currentCountry.nativeName)[2].common\r\n            : Object.values(currentCountry.nativeName)[0].common,\r\n        currentCountry.population,\r\n        currentCountry.region,\r\n        currentCountry.subregion,\r\n        currentCountry.capital, \r\n        currentCountry.topLevelDomain,\r\n        Object.values(currentCountry.currencies)[0].name,\r\n        Object.values(currentCountry.languages).join(', '),\r\n        currentCountry.borders\r\n    )\r\n}\r\n\r\n\r\nfetchCountries()"],"names":[],"version":3,"file":"index.de158e3a.js.map","sourceRoot":"/__parcel_source_root/"}